# Before running, make sure to check the following:
# - COMMON CONFIGS TO CHANGE (including dirs)
# - correct model
# - lora

# ----- COMMON CONFIGS TO CHANGE ----- #

my_wandb_project: ""
my_wandb_run_name: ""
input_formatting: ""

dataset_label: ""

output_dir: /scratch/gpfs/MSALGANIK/$USER/zyg_out_${my_wandb_run_name}/
input_dir: /scratch/gpfs/MSALGANIK/$USER/zyg_in/${input_formatting}/
models_dir: /scratch/gpfs/MSALGANIK/$USER/pretrained-llms/

# Batch size: Number of sequences per batch
# IMPORTANT: Adjust based on model size AND packing setting (see dataset.packed below)
# If packed=True: Use smaller values (4-8 for 1B, 2-4 for 3B, 1-2 for 7B+)
# If packed=False: Can use larger values (16+ for 1B, 8+ for 3B, 4+ for 7B+)
# See CLAUDE.md for memory estimation with packing
batch_size: 4

# ----- END COMMON CONFIGS ----- #

# Model Arguments
model:
  _component_: torchtune.models.llama3_2.lora_llama3_2_1b
  lora_attn_modules: ['q_proj', 'v_proj', 'output_proj']
  apply_lora_to_mlp: True
  lora_rank: 64
  lora_alpha: 128
  lora_dropout: 0.0

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: ${models_dir}/Llama-3.2-1B-Instruct/original/tokenizer.model
  max_seq_len: 2048

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: ${models_dir}/Llama-3.2-1B-Instruct/
  checkpoint_files: [model.safetensors]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3_2
resume_from_checkpoint: False
save_adapter_weights_only: False
save_last_epoch_only: False
epochs_to_save: 'all'

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.01
  lr: 1e-4  # Kept from previous suggestion
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 100

loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

# Training
epochs: 1
max_steps_per_epoch: null
gradient_accumulation_steps: 1
compile: False

dataset:
  _component_: torchtune.datasets.instruct_dataset
  source: "parquet"
  data_dir: "${input_dir}/${dataset_label}"
  split: "train"
  # Packing: Concatenates multiple examples into sequences up to max_seq_len
  # Increases efficiency (no padding waste) but requires smaller batch_size
  # Rule of thumb: If packed=True, use batch_size ≤ 8 for 1B, ≤ 4 for 3B, ≤ 2 for 7B+
  # If packed=False, can use larger batch_size (16+ for 1B, 8+ for 3B, 4+ for 7B+)
  packed: True

run_val_every_n_steps: 50
dataset_val:
  _component_: torchtune.datasets.instruct_dataset
  source: "parquet"
  data_dir: "${input_dir}/${dataset_label}"
  split: "validation"

# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  mode: "offline"
  project: ${my_wandb_project}
  name: ${my_wandb_run_name}
  log_dir: ${output_dir}/logs
log_every_n_steps: 5
log_peak_memory_stats: True

# Environment
device: cuda
dtype: bf16

# Activations Memory
enable_activation_checkpointing: False
enable_activation_offloading: False

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False
  output_dir: ${output_dir}/profiling_outputs
  cpu: True
  cuda: True
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1

hf_token: "token_here"
seed: 1234
shuffle: True


